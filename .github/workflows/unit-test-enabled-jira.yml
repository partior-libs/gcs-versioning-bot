name: Test Jira Versioning

on:
  push:
    paths:
      - 'scripts/get_latest_version.sh'
      - '.github/workflows/unit-test-enabled-jira.yml'
      - 'scripts/store_version_in_jira.sh'
      - 'action.yml'
  workflow_dispatch:

env:
  YAML_CI_BRANCH_CONFIG_IMPORTER: yaml_ci_branch_importer
  YAML_JIRA_CI_CONFIG_IMPORTER: enable_jira_version
  
  
jobs:
  read-config:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.get-repo.outputs.branch-name }}
      pr-exist: ${{ steps.get-repo.outputs.is-PR }}
      pr-target-branch: ${{ steps.get-repo.outputs.pr-target-branch }}
      repo-name: ${{ steps.get-repo.outputs.name }}
      source-branch: ${{ steps.get-repo.outputs.source-branch }}
      delta-commit-msg: ${{ steps.get-repo.outputs.delta-commit-msg }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d'/' -f1)"
          sourceBranch=${GITHUB_REF_NAME}
          prTargetBranch=''
          isPR=false
          commitMessages=''
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d'/' -f1)
            sourceBranch=${GITHUB_HEAD_REF}
            isPR=true
            prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
            git fetch --all
            git branch --all
            echo git log $prTargetBranch..HEAD
            commitMessages=$(git log $prTargetBranch..HEAD --pretty=format:"%s")
          fi

          echo "branch-name=${branchName}" >> $GITHUB_OUTPUT
          echo "is-PR=${isPR}" >> $GITHUB_OUTPUT
          echo "pr-target-branch=${prTargetBranch}" >> $GITHUB_OUTPUT
          echo "name=$(echo ${GITHUB_REPOSITORY}  | cut -d'/' -f2)" >> $GITHUB_OUTPUT
          echo "delta-commit-msg=${commitMessages}" >> $GITHUB_OUTPUT
          echo "source-branch=${sourceBranch}" >> $GITHUB_OUTPUT

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/default.yml
          query-path: .smc.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          output-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci.branches.default
          upload: true
    
  read-jira-versions-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/enable-jira-versions.yml
          query-path: .smc.ci
          output-file: ${{ env.YAML_JIRA_CI_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci
          upload: true
    
  versioning-bot:       
    needs: [ read-config,read-jira-versions-config]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rule: [ enable_jira_version ]
        branch: [ release, develop, feature ]
    env:
      BRANCH_NAME: ${{ needs.read-config.outputs.branch-name }}
      REPO_NAME: ${{ needs.read-config.outputs.repo-name }}
      ALL_DELTA_COMMIT_MSG: ${{ needs.read-config.outputs.delta-commit-msg }}
      SOURCE_BRANCH: ${{ needs.read-config.outputs.source-branch }}
    steps:
     - uses: actions/checkout@v3
     - uses: actions/download-artifact@v3
       with:
         name: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}

     - uses: actions/download-artifact@v3
       with:
         name: ${{ matrix.rule }}

     - name: View commit message
       run: |
          echo [INFO] Start viewing
          echo ${{ env.ALL_DELTA_COMMIT_MSG }}
   
     - name: Start versioning bot
       id: version-bot
       uses: partior-libs/gcs-versioning-bot@main
       with:
         artifactory-username: svc-smc-read
         artifactory-password: ${{ secrets.ARTIFACTORY_NPM_TOKEN_SVC_SMC_READ }}
         jira-username: ${{ secrets.JIRA_USERNAME }}
         jira-password: ${{ secrets.JIRA_API_TOKEN }}
         versioning-rules-importer-file: ${{ matrix.rule }}
         branch-packager-rules-importer-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
         consolidated-commit-msg: ${{ env.ALL_DELTA_COMMIT_MSG }}
         branch-name: ${{ matrix.branch }}
         debug: true
         # branch-name: ${{ env.BRANCH_NAME }}

     - name: Before version update - ${{ steps.version-bot.outputs.artifact-old-version}}
       run: |
          echo [INFO] Final version: ${{ steps.version-bot.outputs.artifact-old-version}}
      
     - name: Final version - ${{ steps.version-bot.outputs.artifact-version-name}}
       run: |
          echo [INFO] Final version: ${{ steps.version-bot.outputs.artifact-version-name}}
     
