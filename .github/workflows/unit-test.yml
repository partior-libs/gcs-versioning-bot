name: Test Auto Versioning
on: [push, pull_request, workflow_dispatch]

env:
  YAML_STD_CI_CONFIG_IMPORTER: std_rule
  YAML_CI_BRANCH_CONFIG_IMPORTER: yaml_ci_branch_importer
  YAML_BUILD_CI_CONFIG_IMPORTER: enable_build_info
  YAML_REPLACE_FILE_CI_CONFIG_IMPORTER: enable_file_replacement
  YAML_REPLACE_MVNPOM_CI_CONFIG_IMPORTER: enable_mavenpom_replacement
  YAML_VERSION_FROM_FILE_CI_CONFIG_IMPORTER: enable_external_version

jobs:
  read-config:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.get-repo.outputs.branch-name }}
      repo-name: ${{ steps.get-repo.outputs.name }}
    steps:
      - uses: actions/checkout@v2

      - name: Get repo details
        id: get-repo
        run: |
          echo ::set-output name=branch-name::$(echo ${GITHUB_REF#refs/heads/} | cut -d"/" -f1)
          echo ::set-output name=name::$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/default.yml
          query-path: .smc.ci.branches.${{ steps.get-repo.outputs.branch-name }}
          output-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci.branches.default
          upload: true

  read-std-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/enable-std-rules.yml
          query-path: .smc.ci
          output-file: ${{ env.YAML_STD_CI_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci
          upload: true

  read-build-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/enable-build-rules.yml
          query-path: .smc.ci
          output-file: ${{ env.YAML_BUILD_CI_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci
          upload: true

  read-replace-file-version-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/enable-replace-file-version.yml
          query-path: .smc.ci
          output-file: ${{ env.YAML_REPLACE_FILE_CI_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci
          upload: true

  read-replace-maven-pom-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/enable-replace-maven-pom.yml
          query-path: .smc.ci
          output-file: ${{ env.YAML_REPLACE_MVNPOM_CI_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci
          upload: true

  read-external-version-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Generate CI branch importer
        uses: partior-libs/gcs-yaml-importer@partior-stable
        with:
          yaml-file: controller-config-files/projects/enable-ver-from-file.yml
          query-path: .smc.ci
          output-file: ${{ env.YAML_VERSION_FROM_FILE_CI_CONFIG_IMPORTER }}
          yaml-file-for-default: controller-config-files/projects/default.yml
          query-path-for-default: .smc.ci
          upload: true

  trigger-with-matrix:
    needs: [ read-config, read-std-config, read-build-config, read-replace-file-version-config, read-replace-maven-pom-config, read-external-version-config ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rule: [ std_rule, enable_build_info, enable_file_replacement, enable_mavenpom_replacement, enable_external_version ]
        branch: [ main, release, develop, feature ]
    env:
      BRANCH_NAME: ${{ needs.read-config.outputs.branch-name }}
      REPO_NAME: ${{ needs.read-config.outputs.repo-name }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}

      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.rule }}

      - name: View Version File - Before
        run: |
          echo [INFO] Viewing versioning file - Pre Activity
          cat ./test-files/sample-version-file.xml

      - name: View Maven POM File - Before
        run: |
          echo [INFO] Viewing Maven POM file - Pre Activity
          cat ./test-files/sample-pom-file.xml

      - name: Start versioning bot
        id: version-bot
        uses: partior-libs/gcs-versioning-bot@main
        with:
          artifactory-username: svc-smc-read
          artifactory-password: ${{ secrets.ARTIFACTORY_NPM_TOKEN_SVC_SMC_READ }}
          versioning-rules-importer-file: ${{ matrix.rule }}
          branch-packager-rules-importer-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
          branch-name: ${{ matrix.branch }}

      - name: View Version File - After
        run: |
          echo [INFO] Viewing versioning file - Post Activity
          cat ./test-files/sample-version-file.xml

      - name: View Maven POM File - After
        run: |
          echo [INFO] Viewing Maven POM file - Post Activity
          cat ./test-files/sample-pom-file.xml

      - name: Final version - ${{ steps.version-bot.outputs.artifact-version-name}}
        run: |
          echo [INFO] Final version: ${{ steps.version-bot.outputs.artifact-version-name}}
          echo "[INFO] Final version: ${{ steps.version-bot.outputs.artifact-version-name}}" > ${{ matrix.rule }}_${{ matrix.branch }}__${{ steps.version-bot.outputs.artifact-version-name}}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.rule }}_${{ matrix.branch }}__${{ steps.version-bot.outputs.artifact-version-name}}
          path: ${{ matrix.rule }}_${{ matrix.branch }}__${{ steps.version-bot.outputs.artifact-version-name}}
          retention-days: 1

  # trigger-by-release-branch:
  #   needs: [ read-config ]
  #   runs-on: ubuntu-latest
  #   env:
  #     BRANCH_NAME: ${{ needs.read-config.outputs.branch-name }}
  #     REPO_NAME: ${{ needs.read-config.outputs.repo-name }}
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}

  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.YAML_CI_CONFIG_IMPORTER }}

  #     - name: Start versioning bot
  #       id: version-bot
  #       uses: partior-libs/gcs-versioning-bot@main
  #       with:
  #         artifactory-username: svc-smc-read
  #         artifactory-password: ${{ secrets.ARTIFACTORY_NPM_TOKEN_SVC_SMC_READ }}
  #         versioning-rules-importer-file: ${{ env.YAML_CI_CONFIG_IMPORTER }}
  #         branch-packager-rules-importer-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
  #         branch-name: release

  # trigger-by-develop-branch:
  #   needs: [ read-config ]
  #   runs-on: ubuntu-latest
  #   env:
  #     BRANCH_NAME: ${{ needs.read-config.outputs.branch-name }}
  #     REPO_NAME: ${{ needs.read-config.outputs.repo-name }}
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}

  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.YAML_CI_CONFIG_IMPORTER }}

  #     - name: Start versioning bot
  #       id: version-bot
  #       uses: partior-libs/gcs-versioning-bot@main
  #       with:
  #         artifactory-username: svc-smc-read
  #         artifactory-password: ${{ secrets.ARTIFACTORY_NPM_TOKEN_SVC_SMC_READ }}
  #         versioning-rules-importer-file: ${{ env.YAML_CI_CONFIG_IMPORTER }}
  #         branch-packager-rules-importer-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
  #         branch-name: develop

  # trigger-by-feature-branch:
  #   needs: [ read-config ]
  #   runs-on: ubuntu-latest
  #   env:
  #     BRANCH_NAME: ${{ needs.read-config.outputs.branch-name }}
  #     REPO_NAME: ${{ needs.read-config.outputs.repo-name }}
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}

  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.YAML_CI_CONFIG_IMPORTER }}

  #     - name: Start versioning bot
  #       id: version-bot
  #       uses: partior-libs/gcs-versioning-bot@main
  #       with:
  #         artifactory-username: svc-smc-read
  #         artifactory-password: ${{ secrets.ARTIFACTORY_NPM_TOKEN_SVC_SMC_READ }}
  #         versioning-rules-importer-file: ${{ env.YAML_CI_CONFIG_IMPORTER }}
  #         branch-packager-rules-importer-file: ${{ env.YAML_CI_BRANCH_CONFIG_IMPORTER }}
  #         branch-name: feature
          
  # test-generic-versioning:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - id: versioning
  #       uses: partior-libs/gcs-versioning-bot@main
  #       with:
  #         artifactory-username: svc-smc-read
  #         artifactory-password: ${{ secrets.ARTIFACTORY_NPM_TOKEN_SVC_SMC_READ }}
  #         artifactory-target-dev-repo: smc-generic-dev
  #         artifactory-target-release-repo: smc-generic-release
  #         artifactory-target-group: antztest
  #         artifactory-target-artifact-name: dummy-artifact
  #         branch-name: ${GITHUB_REF#refs/heads/}
  #         short-hash: ${GITHUB_SHA::8}

  #     - name: Get version
  #       run: |
  #         echo Version: [${{ steps.versioning.outputs.name }}]
