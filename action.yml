name: 'Partior SMC Packaging'
description: 'Package artifact with auto versioning for Smart Contract'
inputs:
  artifactory-username:  
    description: 'Username for artifactory'
    required: true
    default: ''
  artifactory-password:  
    description: 'Password for artifactory'
    required: true
    default: ''
  artifactory-base-url:  
    description: 'Artifactory base URL'
    required: false
    default: 'https://partior.jfrog.io/artifactory'
  jira-username:
    description: 'Jira Username. Mandatory if version-sources.jira.enabled is true'
    required: false
    default: ''
  jira-password: 
    description: 'Jira Password. Mandatory if version-sources.jira.enabled is true'
    required: false
    default: ''
  jira-base-url:
    description: 'Jira Base Url'
    required: false
    default: 'https://partior.atlassian.net'
  branch-name:  
    description: 'Override branch type name. Use only for testing purpose'
    required: false
    default: ''
  versioning-rules-importer-file:
    description: 'File generated from partior-libs/gcs-yaml-importer'
    required: true
    default: ''
  branch-packager-rules-importer-file:
    description: 'File generated from partior-libs/gcs-yaml-importer'
    required: true
    default: ''
  consolidated-commit-msg:
    description: 'Consolidated commit message from git log'
    required: false
    default: '' 
  debug:
    description: 'Debug mode for more logging'
    required: false
    default: 'false'
  

outputs:
  artifact-full-version-name:
    description: "Final output with artifact name and version"
    value: ${{ steps.final-version.outputs.full-version }}
  artifact-version-name:
    description: "Final output. Only version"
    value: ${{ steps.final-version.outputs.new-version }}
  artifact-old-version:
    description: "Version before change"
    value: ${{ steps.final-version.outputs.old-version }}
runs:
  using: "composite"
  steps:
    - name: Get PR info
      id: pr-info
      run: |
        #!/bin/bash -e

        branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
        prTargetBranch=''
        isPR=false
        commitMessages=''
        BUILD_GH_COMMIT_MESSAGE_FILE=commit-message-$(date +%s).tmp

        if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
          branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          isPR=true
          prTargetBranch=remotes/origin/${GITHUB_BASE_REF}
          echo "${{ inputs.consolidated-commit-msg }}" > $BUILD_GH_COMMIT_MESSAGE_FILE
        fi

        if [[ ! "${{ inputs.branch-name }}" == "" ]]; then
          branchName=${{ inputs.branch-name }}
        fi

        echo BUILD_GH_BRANCH_NAME=${branchName} >> $GITHUB_ENV
        echo BUILD_GH_PR_EXIST=${isPR} >> $GITHUB_ENV
        echo BUILD_GH_PR_TARGET_BRANCH=${prTargetBranch} >> $GITHUB_ENV
        echo BUILD_GH_COMMIT_MESSAGE_FILE=$BUILD_GH_COMMIT_MESSAGE_FILE >> $GITHUB_ENV
      shell: bash

    - name: Import importer files
      id: yaml-config
      run: |
        versioningRuleImporterFile=${{ inputs.versioning-rules-importer-file }}
        branchPackagerRuleImporterFile=${{ inputs.branch-packager-rules-importer-file }}
        if [[ ! -f "$versioningRuleImporterFile" ]]; then
          echo [ERROR] Unable to locate versioning rule importer file: [$versioningRuleImporterFile]
          exit 1
        fi
        if [[ ! -f "$branchPackagerRuleImporterFile" ]]; then
          echo [ERROR] Unable to locate branch packager rule importer file: [$branchPackagerRuleImporterFile]
          exit 1
        fi
        source $branchPackagerRuleImporterFile
        source $versioningRuleImporterFile
      shell: bash

    - name: Convert to normal bash env export format
      run: ${{ github.action_path }}/scripts/inject_config_vars.sh "${{ inputs.versioning-rules-importer-file }}"
      shell: bash

    - name: List all config variables
      if: inputs.debug == 'true'
      run: |
        ${{ github.action_path }}/scripts/list_config_variables.sh ${{ github.action_path }}/config/general.ini
        echo BUILD_GH_BRANCH_NAME="${BUILD_GH_BRANCH_NAME}"
        echo BUILD_GH_LABEL_FILE="${BUILD_GH_LABEL_FILE}"
        echo BUILD_GH_TAG_FILE="${BUILD_GH_TAG_FILE}"
        echo BUILD_GH_COMMIT_MESSAGE_FILE="${BUILD_GH_COMMIT_MESSAGE_FILE}"
        if [[ -f $BUILD_GH_COMMIT_MESSAGE_FILE ]]; then
          echo cat $BUILD_GH_COMMIT_MESSAGE_FILE:
          cat $BUILD_GH_COMMIT_MESSAGE_FILE
        fi
      shell: bash

    - run: |
       ${{ github.action_path }}/scripts/get_latest_version.sh "${{ inputs.artifactory-base-url }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_artifactory-dev-repo }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_artifactory-release-repo }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_group }}" \
          "${{ steps.yaml-config.outputs.artifact-base-name }}" \
          "${BUILD_GH_BRANCH_NAME}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_initial-release-version }}" \
          "${{ inputs.artifactory-username }}" \
          "${{ inputs.artifactory-password }}" \
          "${{ inputs.jira-username }}" \
          "${{ inputs.jira-password }}" \
          "${{ inputs.jira-base-url }}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_project-key }}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_enabled }}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_version-identifier }}"   
      shell: bash

    - run: |
        ${{ github.action_path }}/scripts/generate_package_version.sh "${{ steps.yaml-config.outputs.artifact-base-name }}" \
          "${BUILD_GH_BRANCH_NAME}" \
          "${BUILD_GH_LABEL_FILE}" \
          "${BUILD_GH_TAG_FILE}" \
          "${BUILD_GH_COMMIT_MESSAGE_FILE}" \
          "${{ inputs.debug }}"
      shell: bash


    - id: final-version
      run: |
        echo "::set-output name=full-version::${{ steps.yaml-config.outputs.artifact-base-name }}-$(echo $(${{ github.action_path }}/scripts/read_new_version.sh))"
        echo "::set-output name=new-version::$(echo $(${{ github.action_path }}/scripts/read_new_version.sh))"
        echo "::set-output name=old-version::$(echo $(${{ github.action_path }}/scripts/read_old_version.sh))"
      shell: bash
      
    - if: steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_enabled == 'true'
      run: |
        ${{ github.action_path }}/scripts/store_version_in_jira.sh "${{ inputs.artifactory-base-url }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_artifactory-dev-repo }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_artifactory-release-repo }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_group }}" \
          "${{ steps.yaml-config.outputs.artifact-base-name }}" \
          "${{ inputs.artifactory-username }}" \
          "${{ inputs.artifactory-password }}" \
          "${{ inputs.jira-username }}" \
          "${{ inputs.jira-password }}" \
          "${{ inputs.jira-base-url }}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_project-key }}" \
          "${{ steps.final-version.outputs.new-version }}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_version-identifier }}"
      shell: bash
      
    run: |
      ${{ github.action_path }}/scripts/integrate_version_in_issue.sh  "${{ inputs.jira-username }}" \
          "${{ inputs.jira-password }}" \
          "${{ inputs.jira-base-url }}" \
          "${{ steps.yaml-config.outputs.artifact-auto-versioning_version-sources_jira_project-key }}" \
          "${{ steps.final-version.outputs.new-version }}" \
      shell: bash
      
    - run: echo Done versioning
      shell: bash
