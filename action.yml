name: 'Partior SMC Packaging'
description: 'Package artifact with auto versioning for Smart Contract'
inputs:
  artifactory-username:  
    description: 'Username for artifactory'
    required: true
    default: 'NIL'
  artifactory-password:  
    description: 'Password for artifactory'
    required: true
    default: 'NIL'
  artifactory-base-url:  
    description: 'Artifactory base URL'
    required: false
    default: 'https://partior.jfrog.io/artifactory'
  branch-name:  
    description: 'Branch name'
    required: true
    default: 'feature'
  versioning-rules-importer-file:
    description: 'File generated from partior-libs/gcs-yaml-importer'
    required: true
    default: 'NIL'
  branch-packager-rules-importer-file:
    description: 'File generated from partior-libs/gcs-yaml-importer'
    required: true
    default: 'NIL'
  debug:
    description: 'Debug mode for more logging'
    required: false
    default: 'true'
  artifact-type:  
    description: 'Artifact definition type'
    required: false
    default: 'tgz'
outputs:
  artifact-version-name:
    description: "Final output"
    value: ${{ steps.final-version.outputs.name }}
  artifact-old-version:
    description: "Version before change"
    value: ${{ steps.final-version.outputs.old-name }}
runs:
  using: "composite"
  steps:

    - name: Import importer files
      id: yaml-config
      run: |
        versioningRuleImporterFile=${{ inputs.versioning-rules-importer-file }}
        branchPackagerRuleImporterFile=${{ inputs.branch-packager-rules-importer-file }}
        if [[ ! -f "$versioningRuleImporterFile" ]]; then
          echo [ERROR] Unable to locate versioning rule importer file: [$versioningRuleImporterFile]
          exit 1
        fi
        if [[ ! -f "$branchPackagerRuleImporterFile" ]]; then
          echo [ERROR] Unable to locate branch packager rule importer file: [$branchPackagerRuleImporterFile]
          exit 1
        fi
        source $versioningRuleImporterFile
        source $branchPackagerRuleImporterFile
      shell: bash

    - name: Convert to normal bash env export format
      run: ${{ github.action_path }}/scripts/inject_config_vars.sh "${{ inputs.versioning-rules-importer-file }}"
      shell: bash

    - name: List all config variables
      if: inputs.debug == 'true'
      run: ${{ github.action_path }}/scripts/list_config_variables.sh ${{ github.action_path }}/config/general.ini
      shell: bash

    - run: |
       ${{ github.action_path }}/scripts/get_latest_version.sh "${{ inputs.artifactory-base-url }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_artifactory-dev-repo }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_artifactory-release-repo }}" \
          "${{ steps.yaml-config.outputs.artifact_packager_group }}" \
          "${{ steps.yaml-config.outputs.artifact-base-name }}" \
          "${{ inputs.artifact-type }}" \
          "${{ inputs.branch-name }}" \
          "${{ inputs.artifactory-username }}" \
          "${{ inputs.artifactory-password }}"
      shell: bash

    - run: |
        ${{ github.action_path }}/scripts/generate_package_version.sh "${{ steps.yaml-config.outputs.artifact-base-name }}" \
          "${{ inputs.branch-name }}" \
          "${{ inputs.short-hash }}"
      shell: bash

    - id: final-version
      run: echo "::set-output name=name::$(echo $(${{ github.action_path }}/scripts/read_new_version.sh))"
      run: echo "::set-output name=old-version::$(echo $(${{ github.action_path }}/scripts/read_old_version.sh))"
      shell: bash

    - run: echo Done versioning
      shell: bash
