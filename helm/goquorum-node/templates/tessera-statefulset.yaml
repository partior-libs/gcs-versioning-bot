{{ if .Values.node.tessera.serviceAccount.create }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "goquorum-node.tesseraServiceAccountName" . }}
  namespace: {{ .Release.Namespace }}
{{ end }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "goquorum-node.fullname" . }}-tessera-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "goquorum-node.fullname" . }}-tessera-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "goquorum-node.fullname" . }}-tessera-role
subjects:
- kind: ServiceAccount
  name: {{ include "goquorum-node.tesseraServiceAccountName" . }}
  namespace:  {{ .Release.Namespace }}

{{- if .Values.node.tessera.storageClass.create }}
{{- if eq .Values.provider "azure" }}

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ include "goquorum-node.tesseraStorageClassName" . }}
  namespace: {{ .Release.Namespace }}
provisioner: kubernetes.io/azure-file
reclaimPolicy: Retain
mountOptions:
  - dir_mode=0755
  - file_mode=0755
  - uid=0
  - gid=0
  - mfsymlinks
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
parameters:
  skuName: Standard_LRS

{{- else if eq .Values.provider "aws" }}

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ include "goquorum-node.tesseraStorageClassName" . }}
  namespace: {{ .Release.Namespace }}
provisioner: kubernetes.io/aws-ebs
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: gp2
  fsType: ext4

{{- else if eq .Values.provider "gcp" }}

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ include "goquorum-node.tesseraStorageClassName" . }}
  namespace: {{ .Release.Namespace }}
provisioner: kubernetes.io/gce-pd
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: pd-ssd
  fstype: ext4
  replication-type: none

{{- else }}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tessera-pv
  namespace: {{ .Release.Namespace }}
  labels:
    type: local
spec:
  storageClassName: {{ include "goquorum-node.tesseraStorageClassName" . }}
  capacity:
    storage: {{ .Values.node.tessera.storage.sizeLimit | quote }}
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/{{ include "goquorum-node.fullname" . }}"

{{- end }}
{{- end }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tessera
  labels:
    app: tessera
    chart: {{ template "goquorum-node.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: {{ .Release.Namespace }}
    component: {{ .Release.Name }}
    app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}
    helm.sh/chart: {{ include "goquorum-node.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.node.tessera.replicaCount }}
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: tessera
      release: {{ .Release.Name }}
      component: {{ .Release.Name }}
      app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: tessera
  volumeClaimTemplates:
  - metadata:
      name: tessera-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.node.tessera.storageClass.create }}
      storageClassName: {{ include "goquorum-node.tesseraStorageClassName" . }}
      {{- else if and .Values.node.tessera.storageClass.name (not .Values.node.tessera.storageClass.create) }}
      storageClassName: {{ include "goquorum-node.tesseraStorageClassName" . }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.node.tessera.storage.pvcSizeLimit | quote }}
  template:
    metadata:
      labels:
        app: tessera
        release: {{ .Release.Name }}
        component: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "goquorum-node.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.node.tessera.tpport | quote}}
        prometheus.io/path: "/metrics"        
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - tessera
            topologyKey: "topology.kubernetes.io/zone"
      serviceAccountName: {{ include "goquorum-node.tesseraServiceAccountName" . }}
      initContainers:
      containers:
      - name: tessera
        image: "{{ .Values.node.tessera.image.repository }}:{{ .Values.node.tessera.image.tag }}"
        resources:
          requests:
            memory: {{ .Values.node.tessera.resources.memRequest }} 
            cpu: {{ .Values.node.tessera.resources.cpuRequest }} 
          limits:
            memory: {{ .Values.node.tessera.resources.memLimit }} 
            cpu: {{ .Values.node.tessera.resources.cpuLimit }} 
        command: [ "sh" ]
        args:
        - "-cx"
        - "chmod 600 $QHOME/tm/tm.key;
           echo DDIR is $DDIR;
           printenv;

           wget https://jdbc.postgresql.org/download/postgresql-42.3.3.jar;
           cp postgresql-42.3.3.jar /tessera/lib/;

           wget https://s01.oss.sonatype.org/service/local/repositories/releases/content/net/consensys/quorum/tessera/hashicorp-key-vault/{{ .Values.node.tessera.image.tag }}/hashicorp-key-vault-{{ .Values.node.tessera.image.tag }}.tar;
           tar -xvf hashicorp-key-vault-{{ .Values.node.tessera.image.tag }}.tar;
           cp hashicorp-key-vault-{{ .Values.node.tessera.image.tag }}/lib/* /tessera/lib/;

           TESSERA_VERSION=$$(/tessera/bin/tessera version);
           CONFIG_TMPL=$(cat ${DDIR}/tessera-config.json.tmpl);
           PRIV_KEY=$(cat $DDIR/tm.key)
           PUB_KEY=$(cat $DDIR/tm.pub)
           CONFIG_FINAL=$(echo $CONFIG_TMPL | sed \"s-%THIS_PRIV_KEY%-${DDIR}/tm.key-g\" |  sed \"s-%THIS_PUB_KEY%-${DDIR}/tm.pub-g\");
           echo $CONFIG_FINAL > ${DDIR}/tessera-config-final.json;
           cat ${DDIR}/tessera-config-final.json;

           /tessera/bin/tessera -configfile $${DDIR}/tessera-config-final.json | tee -a ${QHOME}/logs/tessera.log;
        "
        ports:
          - name: p2p
            containerPort: {{ .Values.node.tessera.port }}
            protocol: TCP
          - name: tp
            containerPort: {{ .Values.node.tessera.tpport }}
            protocol: TCP
          - name: q2t
            containerPort: {{ .Values.node.tessera.q2tport }}
            protocol: TCP
        env:
          - name: QHOME
            value: {{ .Values.global.dataPath }}
          - name: DDIR
            value: {{ .Values.global.dataPath }}/tm
          - name: JAVA_OPTS
            value: -Dlogback.configurationFile={{ .Values.global.dataPath }}/tm/logback.xml
          - name: HASHICORP_ROLE_ID
            value: {{ .Values.node.tessera.tmKeyhashicorpVault.appRoleRoleId }}
          - name: HASHICORP_SECRET_ID
            value: {{ .Values.node.tessera.tmKeyhashicorpVault.appRoleSecretId }}
        volumeMounts:
        - name: tessera-pvc
          mountPath: {{ .Values.global.dataPath }}
          subPath: quorum-node
        - name: tessera-pvc
          mountPath: {{ .Values.global.dataPath }}/tm
          subPath: quorum-node-tm
        - name: tessera-pvc
          mountPath: {{ .Values.global.dataPath }}/logs
          subPath: quorum-node-logs
        - name: keystore-tm
          mountPath: {{ .Values.global.dataPath }}/tm/tm.pub
          subPath: tm.pub
        - name: keystore-tm
          mountPath: {{ .Values.global.dataPath }}/tm/tm.key
          subPath: tm.key
        - name: tessera-config
          mountPath: {{ .Values.global.dataPath }}/tm/tessera-config.json.tmpl
          subPath: tessera-config.json.tmpl
        - name: tessera-config
          mountPath: {{ .Values.global.dataPath }}/tm/logback.xml
          subPath: logback.xml
      volumes:
      - name: tessera-config
        configMap:
          name: tessera
          items:
          {{ if .Values.node.tessera.tmKeyhashicorpVault.enabled }}
          - key: tessera-config-hashicorpvault.json.tmpl
          {{ else }}
          - key: tessera-config-default.json.tmpl
          {{ end }}
            path: tessera-config.json.tmpl
          - key: logback.xml
            path: logback.xml
      - name: keystore-tm
        configMap:
          name: tm-key
          items:
          - key: tm.pub
            path: tm.pub
          - key: tm.key
            path: tm.key
---
