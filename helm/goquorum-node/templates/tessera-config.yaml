apiVersion: v1
kind: ConfigMap
metadata:
  name: tessera
  
  labels:
    app: quorum
    name: tessera
data:
  tessera-config-default.json.tmpl: |-


    {
      "useWhiteList": false,
      "jdbc": {
        "username": "{{ .Values.node.tessera.db.username }}",
        "password": "{{ .Values.node.tessera.db.password }}",
        "url": "{{ .Values.node.tessera.db.url }}",
        "autoCreateTables": true
      },
      "serverConfigs":[
      {
        "app":"ThirdParty",
        "enabled": true,
        "serverAddress": "http://{{ .Values.node.tessera.loadBalancerIP.p2p }}:{{ .Values.node.tessera.tpport }}",
        "cors": {
            "allowedOrigins": [
                "*"
            ]
        },
        "communicationType" : "REST"
      },
      {
        "app":"Q2T",
        "enabled": true,
        "serverAddress":"http://{{ .Values.node.tessera.loadBalancerIP.int }}:{{ .Values.node.tessera.q2tport }}",
        "communicationType" : "REST"
      },
      {
        "app":"P2P",
        "enabled": true,
        "serverAddress":"http://{{ .Values.node.tessera.loadBalancerIP.p2p }}:{{ .Values.node.tessera.port }}",
        "sslConfig": {
          "tls": "OFF",
          "generateKeyStoreIfNotExisted": true,
          "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
          "serverKeyStorePassword": "quorum",
          "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
          "serverTrustStorePassword": "quorum",
          "serverTrustMode": "TOFU",
          "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
          "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
          "clientKeyStorePassword": "quorum",
          "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
          "clientTrustStorePassword": "quorum",
          "clientTrustMode": "TOFU",
          "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
        },
        "communicationType" : "REST",
        "properties": {
          "partyInfoInterval": "{{ .Values.node.tessera.p2p.partyInfoInterval }}",
          "enclaveKeySyncInterval": "{{ .Values.node.tessera.p2p.enclaveKeySyncInterval }}",
          "syncInterval": "{{ .Values.node.tessera.p2p.syncInterval }}",
          "resendWaitTime": "{{ .Values.node.tessera.p2p.resendWaitTime }}"
        }
      }
      ],
    
        "peer": [     
            {{ $scope := . }}
            {{- $first := true -}}
            {{- range $k, $v := .Values.eNodes -}}
                {{- if $first -}}
                  {{- $first = false -}}
                {{- else -}}
                  ,

                {{- end -}}
                { "url": "http://{{ $v.tmUrl }}:{{ $scope.Values.node.tessera.port }}" }
            {{- end -}}
    
        ],
        "keys": {
             "passwords": [],
             "keyData": [
                {
                    "privateKeyPath": "%THIS_PRIV_KEY%",
                    "publicKeyPath": "%THIS_PUB_KEY%"
                }
              ]
         },
        "alwaysSendTo": [],
        "features": {
            "enablePrivacyEnhancements": {{ .Values.node.flags.privacyEnhancement }}
        }
    }

  tessera-config-hashicorpvault.json.tmpl: |-


    {
      "useWhiteList": false,
      "jdbc": {
        "username": "{{ .Values.node.tessera.db.username }}",
        "password": "{{ .Values.node.tessera.db.password }}",
        "url": "{{ .Values.node.tessera.db.url }}",
        "autoCreateTables": true
      },
      "serverConfigs":[
      {
        "app":"ThirdParty",
        "enabled": true,
        "serverAddress": "http://{{ .Values.node.tessera.loadBalancerIP.p2p }}:{{ .Values.node.tessera.tpport }}",
        "cors": {
            "allowedOrigins": [
                "*"
            ]
        },
        "communicationType" : "REST"
      },
      {
        "app":"Q2T",
        "enabled": true,
        "serverAddress":"http://{{ .Values.node.tessera.loadBalancerIP.int }}:{{ .Values.node.tessera.q2tport }}",
        "communicationType" : "REST"
      },
      {
        "app":"P2P",
        "enabled": true,
        "serverAddress":"http://{{ .Values.node.tessera.loadBalancerIP.p2p }}:{{ .Values.node.tessera.port }}",
        "sslConfig": {
          "tls": "OFF",
          "generateKeyStoreIfNotExisted": true,
          "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
          "serverKeyStorePassword": "quorum",
          "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
          "serverTrustStorePassword": "quorum",
          "serverTrustMode": "TOFU",
          "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
          "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
          "clientKeyStorePassword": "quorum",
          "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
          "clientTrustStorePassword": "quorum",
          "clientTrustMode": "TOFU",
          "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
        },
        "communicationType" : "REST",
        "properties": {
          "partyInfoInterval": "{{ .Values.node.tessera.p2p.partyInfoInterval }}",
          "enclaveKeySyncInterval": "{{ .Values.node.tessera.p2p.enclaveKeySyncInterval }}",
          "syncInterval": "{{ .Values.node.tessera.p2p.syncInterval }}",
          "resendWaitTime": "{{ .Values.node.tessera.p2p.resendWaitTime }}"
        }
      }
      ],
    
        "peer": [     
            {{ $scope := . }}
            {{- $first := true -}}
            {{- range $k, $v := .Values.eNodes -}}
                {{- if $first -}}
                  {{- $first = false -}}
                {{- else -}}
                  ,

                {{- end -}}
                { "url": "http://{{ $v.tmUrl }}:{{ $scope.Values.node.tessera.port }}" }
            {{- end -}}
    
        ],
        "keys": {
          "keyVaultConfigs": [
            {
              "keyVaultType": "HASHICORP",
              "properties": {
                "url": "{{ .Values.node.tessera.tmKeyhashicorpVault.url }}",
                "approlePath": "approle"
              }
            }
          ],
          "keyData": [
            {
              "hashicorpVaultSecretEngineName": "{{ .Values.node.tessera.tmKeyhashicorpVault.secretEngineName }}",
              "hashicorpVaultSecretName": "{{ .Values.node.tessera.tmKeyhashicorpVault.secretName }}",
              "hashicorpVaultSecretVersion": {{ .Values.node.tessera.tmKeyhashicorpVault.secretVersion }},
              "hashicorpVaultPrivateKeyId": "{{ .Values.node.tessera.tmKeyhashicorpVault.privateKeyId }}",
              "hashicorpVaultPublicKeyId": "{{ .Values.node.tessera.tmKeyhashicorpVault.publicKeyId }}"
            }
          ]
        },
        "alwaysSendTo": [],
        "features": {
            "enablePrivacyEnhancements": {{ .Values.node.flags.privacyEnhancement }}
        }
    }

  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>

        <property name="defaultLogLevel" value="{{ .Values.node.tessera.logLevel.default }}" />

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <!-- note that %logger{36} on next line will abbreviate logger names to reduce output -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %replace(%msg){'[\r\n]'\, ''}%n</pattern>
            </encoder>
        </appender>

        <!-- silence hibernate messages that were being created from DefaultCliAdapter -->
        <logger name="org.hibernate.validator.internal.util.Version" level="OFF"/>
        <logger name="org.hibernate.validator.internal.engine.ConfigurationImpl" level="OFF"/>

        <!-- silence noisy logging from regular /partyinfo messages -->
        <logger name="com.quorum.tessera.p2p.PartyInfoResource" level="{{ .Values.node.tessera.logLevel.partyInfoResource }}"/>

        <root level="${verbosity:-${defaultLogLevel}}">
            <appender-ref ref="STDOUT"/>
        </root>

    </configuration>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tm-key
  labels:
    app: tessera
    name: tm-key
data:
  tm.key: |-
    {{ .Values.node.tessera.tmkey }}
  tm.pub: |-
    {{ .Values.node.tessera.tmpub }}